// Script de prueba para el sistema h√≠brido de negocios
require('dotenv').config();
const HybridBusinessService = require('./services/hybrid-business-service');

async function testHybridSystem() {
    console.log('üß™ PRUEBA DEL SISTEMA H√çBRIDO DE NEGOCIOS');
    console.log('==========================================\n');

    const hybridService = new HybridBusinessService();

    try {
        // 1. Probar solo con OpenStreetMap (gratuito)
        console.log('üìç FASE 1: Probando OpenStreetMap (100% gratuito)');
        console.log('------------------------------------------------');
        
        hybridService.setGoogleFallback(false);
        const osmResults = await hybridService.getBusinessesFromAcacias();
        
        console.log('\n‚úÖ RESULTADOS OPENSTREETMAP:');
        console.log(`   üìä Total negocios: ${osmResults.stats.total_unique}`);
        console.log(`   üåç Fuentes: ${osmResults.sources.join(', ')}`);
        console.log(`   üí∞ Costo: $${osmResults.stats.cost.toFixed(4)} USD`);
        
        // Mostrar algunos ejemplos
        if (osmResults.businesses.length > 0) {
            console.log('\nüìã EJEMPLOS DE NEGOCIOS ENCONTRADOS:');
            osmResults.businesses.slice(0, 5).forEach((business, index) => {
                console.log(`   ${index + 1}. ${business.name}`);
                console.log(`      üìç ${business.address}`);
                console.log(`      üè∑Ô∏è  ${business.category}`);
                console.log(`      üìû ${business.phone || 'Sin tel√©fono'}`);
                console.log(`      üåê ${business.website || 'Sin website'}`);
                console.log(`      üìä Fuente: ${business.source}`);
                console.log('');
            });
        }

        // 2. Obtener estad√≠sticas del servicio
        console.log('\nüìà ESTAD√çSTICAS DEL SERVICIO:');
        console.log('-----------------------------');
        const stats = await hybridService.getServiceStats();
        
        console.log('OpenStreetMap:');
        console.log(`   ‚Ä¢ L√≠mite diario: ${stats.openstreetmap.daily_limit.toLocaleString()} requests`);
        console.log(`   ‚Ä¢ L√≠mite mensual: ${stats.openstreetmap.monthly_limit.toLocaleString()} requests`);
        console.log(`   ‚Ä¢ Costo: $${stats.openstreetmap.cost} USD (GRATIS)`);
        console.log(`   ‚Ä¢ Endpoints disponibles: ${stats.openstreetmap.endpoints_available}`);
        
        console.log('\nGoogle Places API:');
        console.log(`   ‚Ä¢ Estado: ${stats.google_places.enabled ? 'HABILITADO' : 'DESHABILITADO'}`);
        console.log(`   ‚Ä¢ Costo estimado: $${stats.total_estimated_cost.toFixed(4)} USD`);

        // 3. Probar sistema h√≠brido (si Google est√° disponible)
        console.log('\nüìç FASE 2: Probando sistema h√≠brido (OSM + Google)');
        console.log('--------------------------------------------------');
        
        hybridService.setGoogleFallback(true);
        
        try {
            const hybridResults = await hybridService.getBusinessesFromAcacias();
            
            console.log('\n‚úÖ RESULTADOS H√çBRIDOS:');
            console.log(`   üìä Total negocios: ${hybridResults.stats.total_unique}`);
            console.log(`   üåç OpenStreetMap: ${hybridResults.stats.osm_count} negocios`);
            console.log(`   üîç Google Places: ${hybridResults.stats.google_count} negocios`);
            console.log(`   üîó Fuentes: ${hybridResults.sources.join(', ')}`);
            console.log(`   üí∞ Costo total: $${hybridResults.stats.cost.toFixed(4)} USD`);
            
            // Comparar con solo OSM
            const improvement = hybridResults.stats.total_unique - osmResults.stats.total_unique;
            if (improvement > 0) {
                console.log(`   üìà Mejora: +${improvement} negocios adicionales con Google`);
            }
            
        } catch (hybridError) {
            console.log(`‚ö†Ô∏è Sistema h√≠brido no disponible: ${hybridError.message}`);
            console.log('‚úÖ Continuando solo con OpenStreetMap (sin costo)');
        }

        // 4. An√°lisis de categor√≠as
        console.log('\nüìä AN√ÅLISIS POR CATEGOR√çAS:');
        console.log('---------------------------');
        const categories = {};
        osmResults.businesses.forEach(business => {
            categories[business.category] = (categories[business.category] || 0) + 1;
        });
        
        Object.entries(categories)
            .sort(([,a], [,b]) => b - a)
            .forEach(([category, count]) => {
                console.log(`   ${category}: ${count} negocios`);
            });

        // 5. Recomendaciones
        console.log('\nüí° RECOMENDACIONES:');
        console.log('-------------------');
        console.log('‚úÖ OpenStreetMap es COMPLETAMENTE GRATUITO');
        console.log('‚úÖ 10,000 requests diarios vs 1,000 de Google');
        console.log('‚úÖ Sin restricciones comerciales');
        console.log('‚úÖ Datos actualizados por la comunidad');
        
        if (osmResults.businesses.length > 50) {
            console.log('üéØ RECOMENDACI√ìN: Usar solo OpenStreetMap');
            console.log('   ‚Ä¢ Suficientes negocios encontrados');
            console.log('   ‚Ä¢ Costo: $0 USD/mes');
        } else {
            console.log('üéØ RECOMENDACI√ìN: Considerar sistema h√≠brido');
            console.log('   ‚Ä¢ Combinar OSM (gratuito) + Google (pago)');
            console.log('   ‚Ä¢ Mejor cobertura de negocios');
        }

        console.log('\nüéâ PRUEBA COMPLETADA EXITOSAMENTE');
        
    } catch (error) {
        console.error('\n‚ùå ERROR EN PRUEBA:', error.message);
        console.error('Stack:', error.stack);
    }
}

// Ejecutar prueba
testHybridSystem().catch(console.error);
